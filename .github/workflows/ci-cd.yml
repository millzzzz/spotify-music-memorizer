name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'

jobs:
  # Quality Gates - Run all checks in parallel for speed
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.bun/install/cache
        key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
        restore-keys: |
          ${{ runner.os }}-bun-

    - name: Install dependencies
      run: bun install --frozen-lockfile

    - name: Run linting
      run: bun run lint

    - name: Run TypeScript type checking
      run: bunx tsc --noEmit
      
    - name: Run tests
      run: bun test

    - name: Validate configuration files
      run: |
        echo "Validating tsconfig.json..."
        bunx tsc --showConfig > /dev/null
        echo "✅ TypeScript configuration is valid"
        
        echo "Validating package.json..."
        bun install --dry-run
        echo "✅ Package.json is valid"

  # Build verification - Ensure production build succeeds
  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: quality-gates
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1

    - name: Install dependencies
      run: bun install --frozen-lockfile

    - name: Build application
      run: bun run build
      env:
        # Provide dummy env vars for build-time validation
        NEXTAUTH_SECRET: dummy-secret-for-build
        NEXTAUTH_URL: http://localhost:3000
        SPOTIFY_CLIENT_ID: dummy-client-id
        SPOTIFY_CLIENT_SECRET: dummy-client-secret

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: .next/
        retention-days: 1

  # Security and dependency auditing
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1

    - name: Audit dependencies
      run: bun audit
      continue-on-error: true # Don't fail CI for audit issues, but report them

    - name: Check for vulnerable dependencies
      run: |
        echo "Checking for known vulnerabilities..."
        # Add any additional security checks here

  # Deployment to staging/production
  deploy:
    name: Deploy to Netlify
    runs-on: ubuntu-latest
    needs: [quality-gates, build-verification]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1

    - name: Install dependencies
      run: bun install --frozen-lockfile

    - name: Build for production
      run: bun run build
      env:
        NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
        NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
        SPOTIFY_CLIENT_ID: ${{ secrets.SPOTIFY_CLIENT_ID }}
        SPOTIFY_CLIENT_SECRET: ${{ secrets.SPOTIFY_CLIENT_SECRET }}

    - name: Deploy to Netlify
      uses: nwtgck/actions-netlify@v3.0
      with:
        publish-dir: '.next'
        production-branch: main
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "Deploy from GitHub Actions - ${{ github.sha }}"
        enable-pull-request-comment: true
        enable-commit-comment: true
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  # Configuration drift detection
  config-drift-detection:
    name: Configuration Drift Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for configuration changes
      run: |
        echo "Checking for critical configuration changes..."
        
        # Check if tsconfig.json has problematic target settings
        if grep -q '"target".*"ES2017"' tsconfig.json; then
          echo "❌ ERROR: Found problematic ES2017 target in tsconfig.json"
          echo "This will cause build failures. Please remove the target setting."
          exit 1
        fi
        
        # Check for other configuration anti-patterns
        if grep -q '"strict".*false' tsconfig.json; then
          echo "❌ WARNING: TypeScript strict mode is disabled"
        fi
        
        echo "✅ Configuration validation passed"

    - name: Validate Next.js configuration
      run: |
        echo "Validating Next.js configuration..."
        if [ -f "next.config.ts" ] || [ -f "next.config.js" ]; then
          echo "✅ Next.js configuration file found"
        else
          echo "❌ ERROR: No Next.js configuration file found"
          exit 1
        fi 